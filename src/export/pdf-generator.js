const puppeteer = require('puppeteer-core');
const path = require('path');
const fs = require('fs');

class PDFGenerator {
    constructor() {
        this.browser = null;
    }

    async init() {
        if (!this.browser) {
            this.browser = await puppeteer.launch({
                headless: 'new',
                args: ['--no-sandbox', '--disable-setuid-sandbox']
            });
        }
    }

    async generatePDF(data, outputPath, options = {}) {
        try {
            await this.init();
            const page = await this.browser.newPage();

            // Set page format for legal documents
            await page.setViewport({
                width: 1200,
                height: 1600,
                deviceScaleFactor: 2
            });

            // Generate HTML content
            const htmlContent = this.generateHTMLContent(data, options);

            // Set content and wait for it to be ready
            await page.setContent(htmlContent, { waitUntil: 'networkidle0' });

            // Generate PDF with legal formatting
            await page.pdf({
                path: outputPath,
                format: options.format === 'legal' ? 'Legal' : 'A4',
                printBackground: true,
                margin: {
                    top: '1in',
                    right: '1in',
                    bottom: '1in',
                    left: '1in'
                },
                displayHeaderFooter: true,
                headerTemplate: this.getHeaderTemplate(options),
                footerTemplate: this.getFooterTemplate(options)
            });

            await page.close();
            return { success: true, path: outputPath };
        } catch (error) {
            console.error('PDF Generation Error:', error);
            throw error;
        }
    }

    generateHTMLContent(data, options) {
        const timestamp = new Date().toLocaleString();
        
        let html = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>${options.title || 'Los Santos Penal Code Document'}</title>
    <style>
        ${this.getPDFStyles()}
    </style>
</head>
<body>
    <div class="document">
        <div class="header">
            <div class="logo-section">
                <h1>LOS SANTOS POLICE DEPARTMENT</h1>
                <h2>PENAL CODE DOCUMENTATION</h2>
            </div>
            <div class="doc-info">
                <p><strong>Generated:</strong> ${timestamp}</p>
                <p><strong>Document Type:</strong> ${this.getDocumentType(data)}</p>
            </div>
        </div>

        <div class="content">
        `;

        if (data.type === 'calculation') {
            html += this.generateCalculationHTML(data);
        } else if (data.type === 'article') {
            html += this.generateArticleHTML(data);
        } else if (data.type === 'search_results') {
            html += this.generateSearchResultsHTML(data);
        } else {
            html += this.generateGenericHTML(data);
        }

        html += `
        </div>

        <div class="footer">
            <p>This document was generated by the Los Santos Penal Code Desktop Application.</p>
            <p>All information is based on current statutory provisions and may be subject to updates.</p>
        </div>
    </div>
</body>
</html>
        `;

        return html;
    }

    generateCalculationHTML(data) {
        const formatCurrency = (amount) => {
            return new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: 'USD'
            }).format(amount);
        };

        const formatDuration = (days) => {
            if (days >= 365) {
                const years = Math.floor(days / 365);
                const remainingDays = days % 365;
                if (remainingDays === 0) {
                    return `${years} year${years !== 1 ? 's' : ''}`;
                } else {
                    const months = Math.floor(remainingDays / 30);
                    return `${years} year${years !== 1 ? 's' : ''} ${months} month${months !== 1 ? 's' : ''}`;
                }
            } else if (days >= 30) {
                const months = Math.floor(days / 30);
                return `${months} month${months !== 1 ? 's' : ''}`;
            } else {
                return `${days} day${days !== 1 ? 's' : ''}`;
            }
        };

        let html = `
            <h3>PENALTY CALCULATION REPORT</h3>
            
            <div class="calculation-summary">
                <h4>SUMMARY OF PENALTIES</h4>
                <table class="summary-table">
                    <tr>
                        <th>Penalty Type</th>
                        <th>Minimum</th>
                        <th>Maximum</th>
                    </tr>
                    <tr>
                        <td>Total Fine</td>
                        <td>${formatCurrency(data.totalFineMin)}</td>
                        <td>${formatCurrency(data.totalFineMax)}</td>
                    </tr>
                    <tr>
                        <td>Total Jail Time</td>
                        <td>${formatDuration(data.totalJailMinDays)}</td>
                        <td>${formatDuration(data.totalJailMaxDays)}</td>
                    </tr>
                    <tr>
                        <td colspan="3" class="articles-count">
                            <strong>Articles Applied: ${data.sections.length}</strong>
                        </td>
                    </tr>
                </table>
            </div>

            <div class="detailed-breakdown">
                <h4>DETAILED BREAKDOWN BY ARTICLE</h4>
                <table class="breakdown-table">
                    <thead>
                        <tr>
                            <th>Article Code</th>
                            <th>Title</th>
                            <th>Fine Range</th>
                            <th>Jail Time Range</th>
                        </tr>
                    </thead>
                    <tbody>
        `;

        data.breakdown.forEach((item, index) => {
            html += `
                <tr>
                    <td class="code">${item.code}</td>
                    <td class="title">
                        <strong>${item.title}</strong>
                        <br><small>${item.articleTitle}</small>
                    </td>
                    <td class="fine">${formatCurrency(item.fineMin)} - ${formatCurrency(item.fineMax)}</td>
                    <td class="jail">${formatDuration(item.jailMinDays)} - ${formatDuration(item.jailMaxDays)}</td>
                </tr>
            `;
        });

        html += `
                    </tbody>
                </table>
            </div>

            <div class="legal-notice">
                <h4>LEGAL NOTICE</h4>
                <p>This calculation is based on the statutory penalties outlined in the applicable penal code sections. 
                Actual sentencing may vary based on:</p>
                <ul>
                    <li>Specific circumstances of the case</li>
                    <li>Judicial discretion and sentencing guidelines</li>
                    <li>Defendant's criminal history</li>
                    <li>Mitigating or aggravating factors</li>
                    <li>Plea agreements or other legal considerations</li>
                </ul>
                <p><strong>This document is for informational purposes only and does not constitute legal advice.</strong></p>
            </div>
        `;

        return html;
    }

    generateArticleHTML(data) {
        let html = `
            <h3>PENAL CODE ARTICLE</h3>
            
            <div class="article-header">
                <h4>${data.title}</h4>
                <p class="article-code">Article: ${data.code}</p>
            </div>

            <div class="article-content">
                <h5>Description</h5>
                <div class="article-text">${data.text}</div>
            </div>

            <div class="penalties">
                <h5>Prescribed Penalties</h5>
                <table class="penalty-table">
                    ${data.punishment ? `<tr><td><strong>Punishment:</strong></td><td>${data.punishment}</td></tr>` : ''}
                    ${data.fine ? `<tr><td><strong>Fine:</strong></td><td>${data.fine}</td></tr>` : ''}
                </table>
            </div>
        `;

        if (data.definitions && data.definitions.length > 0) {
            html += `
                <div class="definitions">
                    <h5>Legal Definitions</h5>
                    <div class="definitions-grid">
            `;
            
            data.definitions.forEach(def => {
                html += `
                    <div class="definition-item">
                        <h6>${def.term}</h6>
                        <p>${def.definition}</p>
                        ${def.citation ? `<cite>${def.citation}</cite>` : ''}
                    </div>
                `;
            });

            html += `
                    </div>
                </div>
            `;
        }

        return html;
    }

    generateSearchResultsHTML(data) {
        let html = `
            <h3>SEARCH RESULTS</h3>
            
            <div class="search-info">
                <p><strong>Search Query:</strong> "${data.query}"</p>
                <p><strong>Results Found:</strong> ${data.results.length}</p>
                <p><strong>Search Scope:</strong> ${data.searchScope}</p>
            </div>

            <div class="search-results">
        `;

        data.results.forEach((result, index) => {
            html += `
                <div class="search-result-item">
                    <h4>${result.code} - ${result.title}</h4>
                    <p class="article-title">${result.articleTitle}</p>
                    <div class="result-content">${result.text}</div>
                    ${result.punishment || result.fine ? `
                        <div class="result-penalties">
                            ${result.punishment ? `<span><strong>Punishment:</strong> ${result.punishment}</span>` : ''}
                            ${result.fine ? `<span><strong>Fine:</strong> ${result.fine}</span>` : ''}
                        </div>
                    ` : ''}
                </div>
            `;
        });

        html += `
            </div>
        `;

        return html;
    }

    generateGenericHTML(data) {
        return `
            <h3>${data.title || 'DOCUMENT'}</h3>
            <div class="generic-content">
                ${data.html || data.text || '<p>No content available.</p>'}
            </div>
        `;
    }

    getDocumentType(data) {
        switch (data.type) {
            case 'calculation': return 'Penalty Calculation Report';
            case 'article': return 'Penal Code Article';
            case 'search_results': return 'Search Results Report';
            default: return 'Legal Document';
        }
    }

    getPDFStyles() {
        return `
            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }

            body {
                font-family: 'Times New Roman', serif;
                font-size: 12pt;
                line-height: 1.6;
                color: #000;
                background: #fff;
            }

            .document {
                max-width: 100%;
                margin: 0;
                padding: 0;
            }

            .header {
                border-bottom: 2px solid #000;
                padding-bottom: 20px;
                margin-bottom: 30px;
                text-align: center;
            }

            .header h1 {
                font-size: 18pt;
                font-weight: bold;
                margin-bottom: 5px;
            }

            .header h2 {
                font-size: 14pt;
                font-weight: normal;
                margin-bottom: 15px;
            }

            .doc-info {
                text-align: right;
                font-size: 10pt;
            }

            .content h3 {
                font-size: 16pt;
                font-weight: bold;
                text-align: center;
                margin: 20px 0;
                text-decoration: underline;
            }

            .content h4 {
                font-size: 14pt;
                font-weight: bold;
                margin: 15px 0 10px 0;
            }

            .content h5 {
                font-size: 12pt;
                font-weight: bold;
                margin: 10px 0 5px 0;
            }

            .content h6 {
                font-size: 11pt;
                font-weight: bold;
                margin: 5px 0;
            }

            table {
                width: 100%;
                border-collapse: collapse;
                margin: 15px 0;
            }

            th, td {
                border: 1px solid #000;
                padding: 8px;
                text-align: left;
                vertical-align: top;
            }

            th {
                background-color: #f0f0f0;
                font-weight: bold;
            }

            .summary-table th,
            .summary-table td {
                text-align: center;
            }

            .articles-count {
                text-align: center !important;
                background-color: #e0e0e0;
            }

            .breakdown-table .code {
                font-weight: bold;
                text-align: center;
                width: 15%;
            }

            .breakdown-table .title {
                width: 40%;
            }

            .breakdown-table .fine,
            .breakdown-table .jail {
                text-align: center;
                width: 22.5%;
            }

            .legal-notice {
                margin-top: 30px;
                padding: 15px;
                border: 2px solid #000;
                background-color: #f9f9f9;
            }

            .legal-notice ul {
                margin: 10px 0 10px 20px;
            }

            .article-header {
                text-align: center;
                margin: 20px 0;
            }

            .article-code {
                font-weight: bold;
                font-style: italic;
            }

            .article-text {
                text-align: justify;
                margin: 15px 0;
                text-indent: 20px;
            }

            .penalty-table td {
                padding: 5px 10px;
            }

            .penalty-table td:first-child {
                width: 20%;
                font-weight: bold;
            }

            .definitions-grid {
                margin: 10px 0;
            }

            .definition-item {
                margin: 10px 0;
                padding: 10px;
                border: 1px solid #ccc;
                background-color: #f9f9f9;
            }

            .definition-item h6 {
                color: #333;
                text-decoration: underline;
            }

            .search-info {
                background-color: #f0f0f0;
                padding: 10px;
                margin: 10px 0;
                border: 1px solid #ccc;
            }

            .search-result-item {
                margin: 20px 0;
                padding: 15px;
                border: 1px solid #000;
            }

            .search-result-item h4 {
                margin-bottom: 5px;
            }

            .article-title {
                font-style: italic;
                color: #666;
                margin-bottom: 10px;
            }

            .result-content {
                text-align: justify;
                margin: 10px 0;
            }

            .result-penalties {
                margin-top: 10px;
                font-weight: bold;
            }

            .result-penalties span {
                display: block;
                margin: 2px 0;
            }

            .footer {
                margin-top: 50px;
                padding-top: 20px;
                border-top: 1px solid #000;
                font-size: 10pt;
                text-align: center;
                color: #666;
            }

            .page-break {
                page-break-before: always;
            }

            /* Print-specific styles */
            @page {
                margin: 1in;
                @top-center {
                    content: "Los Santos Penal Code - " attr(title);
                }
                @bottom-center {
                    content: "Page " counter(page) " of " counter(pages);
                }
            }
        `;
    }

    getHeaderTemplate(options) {
        return `
            <div style="font-size: 10px; text-align: center; width: 100%; margin: 0 20px;">
                <span>Los Santos Penal Code - ${options.title || 'Document'}</span>
            </div>
        `;
    }

    getFooterTemplate(options) {
        return `
            <div style="font-size: 10px; text-align: center; width: 100%; margin: 0 20px;">
                <span class="pageNumber"></span> / <span class="totalPages"></span>
            </div>
        `;
    }

    async close() {
        if (this.browser) {
            await this.browser.close();
            this.browser = null;
        }
    }
}

module.exports = PDFGenerator;
